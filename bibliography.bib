@inproceedings{abramovaEvaluatingCassandraScalability2014,
  title = {Evaluating {{Cassandra Scalability}} with {{YCSB}}},
  booktitle = {Database and {{Expert Systems Applications}}},
  author = {Abramova, Veronika and Bernardino, Jorge and Furtado, Pedro},
  editor = {Decker, Hendrik and Lhotsk{\'a}, Lenka and Link, Sebastian and Spies, Marcus and Wagner, Roland R.},
  year = {2014},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {199--207},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-10085-2_18},
  abstract = {NoSQL data stores appeared to fill a gap in the database market: that of highly scalable data storage that can be used for simple storage and retrieval of key-indexed data while allowing easy data distribution over a possibly large number of servers. Cassandra has been pinpointed as one of the most efficient and scalable among currently existing NoSQL engines. Scalability of these engines means that, by adding nodes, we could have more served requests with the same performance and more nodes could result in reduced execution time of requests. However, we will see that adding nodes not always results in performance increase and we investigate how the workload, database size and the level of concurrency are related to the achieved scaling level. We will overview Cassandra data store engine, and then we evaluate experimentally how it behaves concerning scaling and request time speedup. We use the YCSB {\textendash} Yahoo! Cloud Serving Benchmark for these experiments.},
  isbn = {978-3-319-10085-2},
  langid = {english},
  keywords = {Cassandra,NoSQL,related work,Scalability,YCSB},
  file = {/Users/nkratky/Zotero/storage/BIFV6BJG/Abramova et al. - 2014 - Evaluating Cassandra Scalability with YCSB.pdf}
}

@inproceedings{abramovaTestingCloudBenchmark2014,
  title = {Testing {{Cloud Benchmark Scalability}} with {{Cassandra}}},
  booktitle = {2014 {{IEEE World Congress}} on {{Services}}},
  author = {Abramova, Veronika and Bernardino, Jorge and Furtado, Pedro},
  year = {2014},
  month = jun,
  pages = {434--441},
  issn = {2378-3818},
  doi = {10.1109/SERVICES.2014.81},
  urldate = {2023-12-29},
  abstract = {NoSQL databases were developed as highly scalable databases that allow easy data distribution over a number of servers. With the increased interest of researchers and companies in non-relational technology, NoSQL databases became widely used and a common belief emerged defending that those engines scale well. This means that the use of more nodes would result in reduced execution time of requests and the system would scale adequately, by adding nodes proportionally to data size and load. However, sometimes, adding nodes may not result in improvement of request-serving time. Therefore, it is useful to investigate how different factors, such as workload, data size and number of simultaneous sessions influence scaling capabilities. We will review the architecture of Cassandra, which is known for being one of the most efficient NoSQL engines, and analyze its scalability, using the Yahoo Cloud Serving Benchmark. The results will allow a better understanding of scalability and scalability limitations in that type of environment.},
  keywords = {related work},
  file = {/Users/nkratky/Zotero/storage/JQTI8IS4/Abramova et al. - 2014 - Testing Cloud Benchmark Scalability with Cassandra.pdf;/Users/nkratky/Zotero/storage/7ZB7YBFS/6903301.html}
}

@inproceedings{agrawalDatabaseScalabilityElasticity2011,
  title = {Database {{Scalability}}, {{Elasticity}}, and {{Autonomy}} in the {{Cloud}}},
  booktitle = {Database {{Systems}} for {{Advanced Applications}}},
  author = {Agrawal, Divyakant and El Abbadi, Amr and Das, Sudipto and Elmore, Aaron J.},
  editor = {Yu, Jeffrey Xu and Kim, Myoung Ho and Unland, Rainer},
  year = {2011},
  series = {Lecture {{Notes}} in {{Computer Science}}},
  pages = {2--15},
  publisher = {{Springer}},
  address = {{Berlin, Heidelberg}},
  doi = {10.1007/978-3-642-20149-3_2},
  abstract = {Cloud computing has emerged as an extremely successful paradigm for deploying web applications. Scalability, elasticity, pay-per-use pricing, and economies of scale from large scale operations are the major reasons for the successful and widespread adoption of cloud infrastructures. Since a majority of cloud applications are data driven, database management systems (DBMSs) powering these applications form a critical component in the cloud software stack. In this article, we present an overview of our work on instilling these above mentioned ``cloud features'' in a database system designed to support a variety of applications deployed in the cloud: designing scalable database management architectures using the concepts of data fission and data fusion, enabling lightweight elasticity using low cost live database migration, and designing intelligent and autonomic controllers for system management without human intervention.},
  isbn = {978-3-642-20149-3},
  langid = {english},
  keywords = {autonomic systems,Cloud computing,elasticity,related work,scalability},
  file = {/Users/nkratky/Zotero/storage/3U2N7ZAK/Agrawal et al. - 2011 - Database Scalability, Elasticity, and Autonomy in .pdf}
}

@article{al-dhuraibiElasticityCloudComputing2018,
  title = {Elasticity in {{Cloud Computing}}: {{State}} of the {{Art}} and {{Research Challenges}}},
  shorttitle = {Elasticity in {{Cloud Computing}}},
  author = {{Al-Dhuraibi}, Yahya and Paraiso, Fawaz and Djarallah, Nabil and Merle, Philippe},
  year = {2018},
  month = mar,
  journal = {IEEE Transactions on Services Computing},
  volume = {11},
  number = {2},
  pages = {430--447},
  issn = {1939-1374},
  doi = {10.1109/TSC.2017.2711009},
  urldate = {2023-11-30},
  abstract = {Elasticity is a fundamental property in cloud computing that has recently witnessed major developments. This article reviews both classical and recent elasticity solutions and provides an overview of containerization, a new technological trend in lightweight virtualization. It also discusses major issues and research challenges related to elasticity in cloud computing. We comprehensively review and analyze the proposals developed in this field. We provide a taxonomy of elasticity mechanisms according to the identified works and key properties. Compared to other works in literature, this article presents a broader and detailed analysis of elasticity approaches and is considered as the first survey addressing the elasticity of containers.},
  file = {/Users/nkratky/Zotero/storage/LE3M396Q/Al-Dhuraibi et al. - 2018 - Elasticity in Cloud Computing State of the Art an.pdf;/Users/nkratky/Zotero/storage/A946EMM3/7937885.html}
}

@misc{ApacheCassandraApache,
  title = {Apache {{Cassandra}} | {{Apache Cassandra Documentation}}},
  urldate = {2023-12-15},
  howpublished = {https://cassandra.apache.org/\_/cassandra-basics.html},
  langid = {english},
  file = {/Users/nkratky/Zotero/storage/VGR5FX9U/cassandra-basics.html}
}

@article{armbrustCloudsBerkeleyView2009a,
  title = {Above the {{Clouds}}: {{A Berkeley View}} of {{Cloud Computing}}},
  author = {Armbrust, Michael and Fox, Armando and Griffith, Rean and Joseph, Anthony D and Katz, Randy and Konwinski, Andy and Lee, Gunho and Patterson, David and Rabkin, Ariel and Stoica, Ion and Zaharia, Matei},
  year = {2009},
  month = feb,
  journal = {University of California, UCB/EECS},
  langid = {english},
  file = {/Users/nkratky/Zotero/storage/D44TQNHF/Armbrust et al. - Above the Clouds A Berkeley View of Cloud Computi.pdf}
}

@mastersthesis{baakindAutomaticScalingCassandra2013,
  title = {Automatic Scaling of {{Cassandra}} Clusters},
  author = {Baakind, Tor Andreas},
  year = {2013},
  urldate = {2023-12-29},
  abstract = {The purpose of this thesis is to create an automatic scaling implementation for Cassandra clusters. The automatic scaler should never lower the overall performance of the cluster in a way that results in a bad user experience. It should also be able to successfully scale up and down nodes, and the cluster should continue as if nothing happened. Last but not least, it is desirable that the automatic scaler performs equally, or better than, the person who is in charge of administrating the database. In this thesis we have developed an early version of an autoscaler that may run alongside a Cassandra instance. The implementation is split into two separate implementations: a master-, and an agent-implementation. The master will be deployed to the same server as the application using the cluster, even though this is not required. The agent implementation will be deployed to, and run alongside, all nodes that are a part of the cluster. The agent will monitor the node`s resource usage, and send messages back to the master if the usage increases above, or decreases below certain thresholds. We performed a set of test cases to prove that the implementation works as intended. The test cases recorded the nodes resource-usage to determine the impact our implementation makes to the overall performance.},
  langid = {english},
  keywords = {related work},
  annotation = {Accepted: 2013-09-12T10:59:10Z},
  file = {/Users/nkratky/Zotero/storage/VUI4DIE7/Baakind - 2013 - Automatic scaling of Cassandra clusters.pdf}
}

@misc{ChangingHeapSize,
  title = {Changing Heap Size Parameters | {{DSE}} 6.8 {{Admin}} Guide},
  urldate = {2023-06-06},
  abstract = {Adjust the minimum, maximum and new generation heap sizes to tune JVM.},
  howpublished = {https://docs.datastax.com/en/dse/6.8/dse-admin/datastax\_enterprise/operations/opsConHeapSize.html},
  langid = {american},
  file = {/Users/nkratky/Zotero/storage/EABC274V/opsConHeapSize.html}
}

@article{chiuElasticityCloud2010,
  title = {Elasticity in the Cloud},
  author = {Chiu, David},
  year = {2010},
  month = mar,
  journal = {XRDS: Crossroads, The ACM Magazine for Students},
  volume = {16},
  number = {3},
  pages = {3--4},
  issn = {1528-4972},
  doi = {10.1145/1734160.1734162},
  urldate = {2023-11-30},
  file = {/Users/nkratky/Zotero/storage/C6S2AMTV/Chiu - 2010 - Elasticity in the cloud.pdf}
}

@article{doryMeasuringElasticityCloud2011,
  title = {Measuring {{Elasticity}} for {{Cloud Databases}}},
  author = {Dory, Thibault and Mej{\i}as, Boris and Roy, Peter Van and Tran, Nam-Luc},
  year = {2011},
  journal = {CLOUD COMPUTING},
  abstract = {The rise of the Internet and the multiplication of data sources have multiplied the number of ``Bigdata'' storage problems. These data sets are not only very big but also tend to grow very fast, sometimes in a short period. Distributed databases that work well for such data sets need to be not only scalable but also elastic to ensure a fast response to growth in demand of computing power or storage. The goal of this article is to present measurement results that characterize the elasticity of three databases. We have chosen Cassandra, HBase, and mongoDB as three representative popular horizontally scalable NoSQL databases that are in production use. We have made measurements under realistic loads up to 48 nodes, using the Wikipedia database to create our dataset and using the Rackspace cloud infrastructure. We define precisely our methodology and we introduce a new dimensionless measure for elasticity to allow uniform comparisons of different databases at different scales. Our results show clearly that the technical choices taken by the databases have a strong impact on the way they react when new nodes are added to the clusters.},
  langid = {english},
  file = {/Users/nkratky/Zotero/storage/BLD49W67/Dory et al. - 2011 - Measuring Elasticity for Cloud Databases.pdf}
}

@article{dustdarPrinciplesElasticProcesses2011,
  title = {Principles of {{Elastic Processes}}},
  author = {Dustdar, Schahram and Guo, Yike and Satzger, Benjamin and Truong, Hong-Linh},
  year = {2011},
  month = nov,
  journal = {Internet Computing, IEEE},
  volume = {15},
  pages = {66--71},
  doi = {10.1109/MIC.2011.121},
  abstract = {Cloud computing's success has made on-demand computing with a pay-as-you-go pricing model popular. However, cloud computing's focus on resources and costs limits progress in realizing more flexible, adaptive processes. The authors introduce elastic processes, which are based on explicitly modeling resources, cost, and quality, and show how they improve on the state of the art.},
  file = {/Users/nkratky/Zotero/storage/PCCU7A32/Dustdar et al. - 2011 - Principles of Elastic Processes.pdf}
}

@misc{ElasticityAWSWellArchitected,
  title = {Elasticity - {{AWS Well-Architected Framework}}},
  urldate = {2023-11-29},
  howpublished = {https://wa.aws.amazon.com/wat.concept.elasticity.en.html},
  file = {/Users/nkratky/Zotero/storage/ZU4E3CEF/wat.concept.elasticity.en.html}
}

@inproceedings{emeakarohaLowLevelMetrics2010d,
  title = {Low Level {{Metrics}} to {{High}} Level {{SLAs}} - {{LoM2HiS}} Framework: {{Bridging}} the Gap between Monitored Metrics and {{SLA}} Parameters in Cloud Environments},
  shorttitle = {Low Level {{Metrics}} to {{High}} Level {{SLAs}} - {{LoM2HiS}} Framework},
  booktitle = {2010 {{International Conference}} on {{High Performance Computing}} \& {{Simulation}}},
  author = {Emeakaroha, Vincent C. and Brandic, Ivona and Maurer, Michael and Dustdar, Schahram},
  year = {2010},
  month = jun,
  pages = {48--54},
  doi = {10.1109/HPCS.2010.5547150},
  urldate = {2023-12-03},
  abstract = {Cloud computing represents a novel on-demand computing approach where resources are provided in compliance to a set of predefined non-functional properties specified and negotiated by means of Service Level Agreements (SLAs). In order to avoid costly SLA violations and to timely react to failures and environmental changes, advanced SLA enactment strategies are necessary, which include appropriate resource-monitoring concepts. Currently, Cloud providers tend to adopt existing monitoring tools, as for example those from Grid environments. However, those tools are usually restricted to locality and homogeneity of monitored objects, are not scalable, and do not support mapping of low-level resource metrics e.g., system up and down time to high-level application specific SLA parameters e.g., system availability. In this paper we present a novel framework for managing the mappings of the Low-level resource Metrics to High-level SLAs (LoM2HiS framework). The LoM2HiS framework is embedded into FoSII infrastructure, which facilitates autonomic SLA management and enforcement. Thus, the LoM2HiS framework detects future SLA violation threats and can notify the enactor component to act so as to avert the threats. We discuss the conceptual model of the LoM2HiS framework, followed by the implementation details. Finally, we present the first experimental results and a proof of concept of the LoM2HiS framework.},
  file = {/Users/nkratky/Zotero/storage/6Z2ISMHE/Emeakaroha et al. - 2010 - Low level Metrics to High level SLAs - LoM2HiS fra.pdf;/Users/nkratky/Zotero/storage/8ZMNR9AY/5547150.html;/Users/nkratky/Zotero/storage/QLW2AQLC/5547150.html;/Users/nkratky/Zotero/storage/ZENR63LF/5547150.html}
}

@inproceedings{foxHarvestYieldScalable1999a,
  title = {Harvest, Yield, and Scalable Tolerant Systems},
  booktitle = {Proceedings of the {{Seventh Workshop}} on {{Hot Topics}} in {{Operating Systems}}},
  author = {Fox, A. and Brewer, E.A.},
  year = {1999},
  month = mar,
  pages = {174--178},
  doi = {10.1109/HOTOS.1999.798396},
  urldate = {2023-12-15},
  abstract = {The cost of reconciling consistency and state management with high availability is highly magnified by the unprecedented scale and robustness requirements of today's Internet applications. We propose two strategies for improving overall availability using simple mechanisms that scale over large applications whose output behavior tolerates graceful degradation. We characterize this degradation in terms of harvest and yield, and map it directly onto engineering mechanisms that enhance availability by improving fault isolation, and in some cases also simplify programming. By collecting examples of related techniques in the literature and illustrating the surprising range of applications that can benefit from these approaches, we hope to motivate a broader research program in this area.},
  file = {/Users/nkratky/Zotero/storage/GF5NAPTW/Fox and Brewer - 1999 - Harvest, yield, and scalable tolerant systems.pdf;/Users/nkratky/Zotero/storage/TM7VIAN7/798396.html}
}

@inproceedings{herbstElasticityCloudComputing2013,
  title = {Elasticity in {{Cloud Computing}}: {{What It Is}}, and {{What It Is Not}}},
  shorttitle = {Elasticity in {{Cloud Computing}}},
  booktitle = {10th {{International Conference}} on {{Autonomic Computing}} ({{ICAC}} 13)},
  author = {Herbst, Nikolas Roman and Kounev, Samuel and Reussner, Ralf},
  year = {2013},
  month = jun,
  pages = {23--27},
  urldate = {2023-11-29},
  isbn = {978-1-931971-02-7},
  langid = {english},
  file = {/Users/nkratky/Zotero/storage/LHX9VC5L/Herbst et al. - 2013 - Elasticity in Cloud Computing What It Is, and Wha.pdf}
}

@misc{K8SSAND1326SetDefault,
  title = {{{K8SSAND-1326}} {$\hyphenbullet$} {{Set}} Default Heap Size to Half Container Memory Limit {$\cdot$} {{Issue}} \#296 {$\cdot$} K8ssandra/Cass-Operator},
  journal = {GitHub},
  urldate = {2023-06-06},
  abstract = {What is missing? The heap size in the Cassandra container does not currently scale in response to changes to the memory limits set by the container runtime. This means that users who set a memory l...},
  howpublished = {https://github.com/k8ssandra/cass-operator/issues/296},
  langid = {english}
}

@article{kellerWSLAFrameworkSpecifying2003,
  title = {The {{WSLA Framework}}: {{Specifying}} and {{Monitoring Service Level Agreements}} for {{Web Services}}},
  shorttitle = {The {{WSLA Framework}}},
  author = {Keller, Alexander and Ludwig, Heiko},
  year = {2003},
  month = mar,
  journal = {Journal of Network and Systems Management},
  volume = {11},
  number = {1},
  pages = {57--81},
  issn = {1573-7705},
  doi = {10.1023/A:1022445108617},
  urldate = {2023-12-03},
  abstract = {We describe a novel framework for specifying and monitoring Service Level Agreements (SLA) for Web Services. SLA monitoring and enforcement become increasingly important in a Web Service environment where enterprise applications and services rely on services that may be subscribed dynamically and on-demand. For economic and practical reasons, we want an automated provisioning process for both the service itself as well as the SLA managment system that measures and monitors the QoS parameters, checks the agreed-upon service levels, and reports violations to the authorized parties involved in the SLA management process. Our approach to these issues is presented in this paper. The Web Service Level Agreement (WSLA) framework is targeted at defining and monitoring SLAs for Web Services. Although WSLA has been designed for a Web Services environment, it is applicable as well to any inter-domain management scenario, such as business process and service management, or the management of networks, systems and applications in general. The WSLA framework consists of a flexible and extensible language based on XML Schema and a runtime architecture comprising several SLA monitoring services, which may be outsourced to third parties to ensure a maximum of objectivity. WSLA enables service customers and providers to unambiguously define a wide variety of SLAs, specify the SLA parameters and the way they are measured, and relate them to managed resource instrumentations. Upon receipt of an SLA specification, the WSLA monitoring services are automatically configured to enforce the SLA. An implementation of the WSLA framework, termed SLA Compliance Monitor, is publicly available as part of the IBM Web Services Toolkit.},
  langid = {english},
  keywords = {electronic contracts,Service Level Agreements,service management,Web Services,WSLA},
  file = {/Users/nkratky/Zotero/storage/ED79FUU4/Keller and Ludwig - 2003 - The WSLA Framework Specifying and Monitoring Serv.pdf}
}

@misc{knewtonSimplifyingCassandraHeap2017,
  title = {Simplifying {{Cassandra Heap Size Allocation}}},
  author = {Knewton},
  year = {2017},
  month = dec,
  journal = {Knerd},
  urldate = {2023-06-06},
  abstract = {by Josh Wickman},
  langid = {english},
  file = {/Users/nkratky/Zotero/storage/LT3IL3FA/simplifying-cassandra-heap-size-allocation-e39628efd7e6.html}
}

@inproceedings{konstantinouElasticityNoSQLDatabases2011,
  title = {On the Elasticity of {{NoSQL}} Databases over Cloud Management Platforms},
  booktitle = {Proceedings of the 20th {{ACM}} International Conference on {{Information}} and Knowledge Management},
  author = {Konstantinou, Ioannis and Angelou, Evangelos and Boumpouka, Christina and Tsoumakos, Dimitrios and Koziris, Nectarios},
  year = {2011},
  month = oct,
  series = {{{CIKM}} '11},
  pages = {2385--2388},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2063576.2063973},
  urldate = {2023-12-30},
  abstract = {NoSQL databases focus on analytical processing of large scale datasets, offering increased scalability over commodity hardware. One of their strongest features is elasticity, which allows for fairly portioned premiums and high-quality performance and directly applies to the philosophy of a cloud-based platform. Yet, the process of adaptive expansion and contraction of resources usually involves a lot of manual effort during cluster configuration. To date, there exists no comparative study to quantify this cost and measure the efficacy of NoSQL engines that offer this feature over a cloud provider. In this work, we present a cloud-enabled framework for adaptive monitoring of NoSQL systems. We perform a study of the elasticity feature on some of the most popular NoSQL databases over an open-source cloud platform. Based on these measurements, we finally present a prototype implementation of a decision making system that enables automatic elastic operations of any NoSQL engine based on administrator or application-specified constraints.},
  isbn = {978-1-4503-0717-8},
  keywords = {cassandra,cloud computing,hbase,nosql,related work,riak},
  file = {/Users/nkratky/Zotero/storage/XKY9IQ8X/Konstantinou et al. - 2011 - On the elasticity of NoSQL databases over cloud ma.pdf}
}

@misc{Kubernetes24Volume2022,
  title = {Kubernetes 1.24: {{Volume Expansion Now A Stable Feature}}},
  shorttitle = {Kubernetes 1.24},
  year = {2022},
  month = may,
  journal = {Kubernetes},
  urldate = {2023-12-15},
  abstract = {Author: Hemant Kumar (Red Hat) Volume expansion was introduced as a alpha feature in Kubernetes 1.8 and it went beta in 1.11 and with Kubernetes 1.24 we are excited to announce general availability(GA) of volume expansion. This feature allows Kubernetes users to simply edit their PersistentVolumeClaim objects and specify new size in PVC Spec and Kubernetes will automatically expand the volume using storage backend and also expand the underlying file system in-use by the Pod without requiring any downtime at all if possible.},
  chapter = {blog},
  howpublished = {https://kubernetes.io/blog/2022/05/05/volume-expansion-ga/},
  langid = {english},
  file = {/Users/nkratky/Zotero/storage/LFD3MKS4/volume-expansion-ga.html}
}

@article{kuhlenkampBenchmarkingScalabilityElasticity2014,
  title = {Benchmarking Scalability and Elasticity of Distributed Database Systems},
  author = {Kuhlenkamp, J{\"o}rn and Klems, Markus and R{\"o}ss, Oliver},
  year = {2014},
  month = aug,
  journal = {Proceedings of the VLDB Endowment},
  volume = {7},
  number = {12},
  pages = {1219--1230},
  issn = {2150-8097},
  doi = {10.14778/2732977.2732995},
  urldate = {2023-12-30},
  abstract = {Distributed database system performance benchmarks are an important source of information for decision makers who must select the right technology for their data management problems. Since important decisions rely on trustworthy experimental data, it is necessary to reproduce experiments and verify the results. We reproduce performance and scalability benchmarking experiments of HBase and Cassandra that have been conducted by previous research and compare the results. The scope of our reproduced experiments is extended with a performance evaluation of Cassandra on different Amazon EC2 infrastructure configurations, and an evaluation of Cassandra and HBase elasticity by measuring scaling speed and performance impact while scaling.},
  keywords = {related work},
  file = {/Users/nkratky/Zotero/storage/V2M9NVYX/Kuhlenkamp et al. - 2014 - Benchmarking scalability and elasticity of distrib.pdf}
}

@article{lakshmanCassandraDecentralizedStructured2010,
  title = {Cassandra: A Decentralized Structured Storage System},
  shorttitle = {Cassandra},
  author = {Lakshman, Avinash and Malik, Prashant},
  year = {2010},
  month = apr,
  journal = {ACM SIGOPS Operating Systems Review},
  volume = {44},
  number = {2},
  pages = {35--40},
  issn = {0163-5980},
  doi = {10.1145/1773912.1773922},
  urldate = {2023-12-29},
  abstract = {Cassandra is a distributed storage system for managing very large amounts of structured data spread out across many commodity servers, while providing highly available service with no single point of failure. Cassandra aims to run on top of an infrastructure of hundreds of nodes (possibly spread across different data centers). At this scale, small and large components fail continuously. The way Cassandra manages the persistent state in the face of these failures drives the reliability and scalability of the software systems relying on this service. While in many ways Cassandra resembles a database and shares many design and implementation strategies therewith, Cassandra does not support a full relational data model; instead, it provides clients with a simple data model that supports dynamic control over data layout and format. Cassandra system was designed to run on cheap commodity hardware and handle high write throughput while not sacrificing read efficiency.},
  file = {/Users/nkratky/Zotero/storage/VD5I9RHG/Lakshman and Malik - 2010 - Cassandra a decentralized structured storage syst.pdf}
}

@inproceedings{larssonQualityElasticityImprovedResource2019,
  title = {Quality-{{Elasticity}}: {{Improved Resource Utilization}}, {{Throughput}}, and {{Response Times Via Adjusting Output Quality}} to {{Current Operating Conditions}}},
  shorttitle = {Quality-{{Elasticity}}},
  booktitle = {2019 {{IEEE International Conference}} on {{Autonomic Computing}} ({{ICAC}})},
  author = {Larsson, Lars and T{\"a}rneberg, William and Klein, Cristian and Elmroth, Erik},
  year = {2019},
  month = jun,
  pages = {52--62},
  issn = {2474-0756},
  doi = {10.1109/ICAC.2019.00017},
  urldate = {2023-11-29},
  abstract = {This work addresses two related problems for on-line services, namely poor resource utilization during regular operating conditions, and low throughput, long response times, or poor performance under periods of high system load. To address these problems, we introduce our notion of quality-elasticity as a manner of dynamically adapting response qualities from software services along a fine-grained spectrum. When resources are abundant, response quality can be increased, and when resources are scarce, responses are delivered at a lower quality to prioritize throughput and response times. We present an example of how a complex online shopping site can be made quality-elastic. Experiments show that, compared to state of the art, improvements in throughput (57\% more served queries), lowered response times (8 time reduction for 95th percentile responses), and an estimated 40\% profitability increase can be made using our quality-elastic approach. When resources are abundant, our approach may achieve upwards of twice as high resource utilization as prior work in this field.},
  file = {/Users/nkratky/Zotero/storage/TDZ2CNJ7/Larsson et al. - 2019 - Quality-Elasticity Improved Resource Utilization,.pdf;/Users/nkratky/Zotero/storage/GNY4SAJX/8831198.html}
}

@inproceedings{laubisCloudAdoptionFineGrained2016,
  title = {Cloud {{Adoption}} by {{Fine-Grained Resource Adaptation}}: {{Price Determination}} of {{Diagonally Scalable IaaS}}},
  shorttitle = {Cloud {{Adoption}} by {{Fine-Grained Resource Adaptation}}},
  booktitle = {Advances in {{Service-Oriented}} and {{Cloud Computing}}},
  author = {Laubis, Kevin and Simko, Viliam and Schuller, Alexander},
  editor = {Celesti, Antonio and Leitner, Philipp},
  year = {2016},
  series = {Communications in {{Computer}} and {{Information Science}}},
  pages = {249--257},
  publisher = {{Springer International Publishing}},
  address = {{Cham}},
  doi = {10.1007/978-3-319-33313-7_19},
  abstract = {Cloud computing is a suitable solution for addressing the uncertainty of resource demand by allowing dynamic resource adjustment. However, most IaaS cloud providers offer their services with a limited granularity at rather slow scaling speeds and flat pricing schemes. Diagonal scaling techniques can offer a more adaptive and fine-grained service with a likewise granular pricing model. Before offering such an adaptive service, cloud providers need a comparison between horizontal and diagonal scaling models to estimate how resource prices can be increased while still staying competitive. In this paper we examine the resource reduction potential of diagonal scaling in comparison to conventional horizontal approaches. Given an empirical load pattern of a web application provider we find a CPU allocation reduction potential of 8.05~\% compared to the conventional service. Given a more fine-grained pricing model, we find an additional revenue potential for diagonal scaling of 9.01~\% when following a competitor based pricing regime.},
  isbn = {978-3-319-33313-7},
  langid = {english},
  keywords = {Adoption,Cloud computing,IaaS,Pricing,related work,Scaling},
  file = {/Users/nkratky/Zotero/storage/NJKDK9BP/Laubis et al. - 2016 - Cloud Adoption by Fine-Grained Resource Adaptation.pdf}
}

@inproceedings{lehrigScalabilityElasticityEfficiency2015a,
  title = {Scalability, {{Elasticity}}, and {{Efficiency}} in {{Cloud Computing}}: A {{Systematic Literature Review}} of {{Definitions}} and {{Metrics}}},
  shorttitle = {Scalability, {{Elasticity}}, and {{Efficiency}} in {{Cloud Computing}}},
  booktitle = {Proceedings of the 11th {{International ACM SIGSOFT Conference}} on {{Quality}} of {{Software Architectures}}},
  author = {Lehrig, Sebastian and Eikerling, Hendrik and Becker, Steffen},
  year = {2015},
  month = may,
  series = {{{QoSA}} '15},
  pages = {83--92},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2737182.2737185},
  urldate = {2023-12-30},
  abstract = {Context: In cloud computing, there is a multitude of definitions and metrics for scalability, elasticity, and efficiency. However, stakeholders have little guidance for choosing fitting definitions and metrics for these quality properties, thus leading to potential misunderstandings. For example, cloud consumers and providers cannot negotiate reliable and quantitative service level objectives directly understood by each stakeholder. Objectives: Therefore, we examine existing definitions and metrics for these quality properties from the viewpoint of cloud consumers, cloud providers, and software architects with regard to commonly used concepts. Methods: We execute a systematic literature review (SLR), reproducibly collecting common concepts in definitions and metrics for scalability, elasticity, and efficiency. As quality selection criteria, we assess whether existing literature differentiates the three properties, exemplifies metrics, and considers typical cloud characteristics and cloud roles. Results: Our SLR yields 418 initial results from which we select 20 for in-depth evaluation based on our quality selection criteria. In our evaluation, we recommend concepts, definitions, and metrics for each property. Conclusions: Software architects can use our recommendations to analyze the quality of cloud computing applications. Cloud providers and cloud consumers can specify service level objectives based on our metric suggestions.},
  isbn = {978-1-4503-3470-9},
  keywords = {cloud,cloud computing,definitions,efficiency,elasticity,metrics,related work,scalability,systematic literature review},
  file = {/Users/nkratky/Zotero/storage/HXXUQ35R/Lehrig et al. - 2015 - Scalability, Elasticity, and Efficiency in Cloud C.pdf}
}

@article{leymannCloudComputing2011,
  title = {Cloud {{Computing}}},
  author = {Leymann, Frank},
  year = {2011},
  month = jul,
  volume = {53},
  number = {4},
  pages = {163--164},
  publisher = {{De Gruyter Oldenbourg}},
  issn = {2196-7032},
  doi = {10.1524/itit.2011.9070},
  urldate = {2023-11-30},
  abstract = {Article Cloud Computing was published on July 1, 2011 in the journal it - Information Technology (volume 53, issue 4).},
  chapter = {it - Information Technology},
  copyright = {De Gruyter expressly reserves the right to use all content for commercial text and data mining within the meaning of Section 44b of the German Copyright Act.},
  langid = {english},
  file = {/Users/nkratky/Zotero/storage/LPXMI4Z8/Leymann - 2011 - Cloud Computing.pdf}
}

@article{lorido-botranReviewAutoscalingTechniques2014,
  title = {A {{Review}} of {{Auto-scaling Techniques}} for {{Elastic Applications}} in {{Cloud Environments}}},
  author = {{Lorido-Botran}, Tania and {Miguel-Alonso}, Jose and Lozano, Jose A.},
  year = {2014},
  month = dec,
  journal = {Journal of Grid Computing},
  volume = {12},
  number = {4},
  pages = {559--592},
  issn = {1572-9184},
  doi = {10.1007/s10723-014-9314-7},
  urldate = {2023-12-30},
  abstract = {Cloud computing environments allow customers to dynamically scale their applications. The key problem is how to lease the right amount of resources, on a pay-as-you-go basis. Application re-dimensioning can be implemented effortlessly, adapting the resources assigned to the application to the incoming user demand. However, the identification of the right amount of resources to lease in order to meet the required Service Level Agreement, while keeping the overall cost low, is not an easy task. Many techniques have been proposed for automating application scaling. We propose a classification of these techniques into five main categories: static threshold-based rules, control theory, reinforcement learning, queuing theory and time series analysis. Then we use this classification to carry out a literature review of proposals for auto-scaling in the cloud.},
  langid = {english},
  keywords = {Auto-scaling,Cloud computing,related work,Scalable applications,Service level agreement},
  file = {/Users/nkratky/Zotero/storage/4L9WVC8J/Lorido-Botran et al. - 2014 - A Review of Auto-scaling Techniques for Elastic Ap.pdf}
}

@techreport{mellNISTDefinitionCloud2011a,
  title = {The {{NIST Definition}} of {{Cloud Computing}}},
  author = {Mell, Peter and Grance, Tim},
  year = {2011},
  month = sep,
  number = {NIST Special Publication (SP) 800-145},
  institution = {{National Institute of Standards and Technology}},
  doi = {10.6028/NIST.SP.800-145},
  urldate = {2023-12-21},
  abstract = {Cloud computing is a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction. This cloud model is composed of five essential characteristics, three service models, and four deployment models.},
  langid = {english},
  file = {/Users/nkratky/Zotero/storage/87JQ93YP/Mell and Grance - 2011 - The NIST Definition of Cloud Computing.pdf}
}

@inproceedings{miyokawaElasticityImprovementCassandra2016a,
  title = {Elasticity {{Improvement}} of {{Cassandra}}},
  booktitle = {Proceedings of the 10th {{International Conference}} on {{Ubiquitous Information Management}} and {{Communication}}},
  author = {Miyokawa, Shohei and Tokuda, Taiki and Yamaguchi, Saneyasu},
  year = {2016},
  month = jan,
  series = {{{IMCOM}} '16},
  pages = {1--7},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/2857546.2857584},
  urldate = {2023-12-29},
  abstract = {Load size for a service on the Internet changes remarkably every hour. Thus, it is expected for service system scales to change dynamically according to load size. KVS (key-value store) is a scalable DBMS (database management system) widely used in large-scale Internet services. In this paper, we focus on Cassandra, a popular open-source KVS implementation, and discuss methods for improving dynamic scaling performance. First, we evaluate node joining time, which is the time to complete adding a node to a running KVS system, and show that its bottleneck process is disk I/O in the existing nodes. Second, we analyze disk accesses in the bottleneck nodes and indicate that some heavily accessed files cause a large number of disk accesses. Third, we propose a method for improving elasticity, which means decreasing node adding and removing time, of Cassandra. The method reduces disk accesses significantly by keeping the heavily accessed file in the page cache. Lastly, we evaluate elasticity of our methods. Our experimental results demonstrate that the method can improve the scaling-up and scaling-down performance of Cassandra.},
  isbn = {978-1-4503-4142-4},
  keywords = {Cassandra,Key-Value Store,page cache,related work},
  file = {/Users/nkratky/Zotero/storage/T5CTEKF5/Miyokawa et al. - 2016 - Elasticity Improvement of Cassandra.pdf}
}

@article{nasticSLOCServiceLevel2020,
  title = {{{SLOC}}: {{Service Level Objectives}} for {{Next Generation Cloud Computing}}},
  shorttitle = {{{SLOC}}},
  author = {Nastic, Stefan and Morichetta, Andrea and Pusztai, Thomas and Dustdar, Schahram and Ding, Xiaoning and Vij, Deepak and Xiong, Ying},
  year = {2020},
  month = may,
  journal = {IEEE Internet Computing},
  volume = {24},
  number = {3},
  pages = {39--50},
  issn = {1941-0131},
  doi = {10.1109/MIC.2020.2987739},
  urldate = {2023-11-26},
  abstract = {Since the emergence of cloud computing service level objectives (SLOs) and service level agreements (SLAs) have put themselves forward as one of the key enablers for cloud's on-demand, pay-as-you-go service consumption model. To date, the vast majority of cloud platforms provide support for SLAs only in terms of statically predefined SLOs, e.g., service availability, and low-level resource capacity guarantees, e.g., CPU usage. Unfortunately, there is only limited support to clearly map workload performance requirements to the resource capacity guarantees. In this article, we introduce SLOC{\textemdash} a novel elasticity framework, which promotes a novel performance-driven, SLO-native approach to cloud computing. We outline the main research challenges, vision, and approach of our SLOC framework toward the SLO-native paradigm in next generation cloud computing.},
  file = {/Users/nkratky/Zotero/storage/FMTDYAX9/Nastic et al. - 2020 - SLOC Service Level Objectives for Next Generation.pdf;/Users/nkratky/Zotero/storage/NEEKEGZF/9146966.html}
}

@inproceedings{pusztaiNovelMiddlewareEfficiently2021a,
  title = {A {{Novel Middleware}} for {{Efficiently Implementing Complex Cloud-Native SLOs}}},
  booktitle = {2021 {{IEEE}} 14th {{International Conference}} on {{Cloud Computing}} ({{CLOUD}})},
  author = {Pusztai, Thomas and Morichetta, Andrea and Pujol, V{\'i}ctor Casamayor and Dustdar, Schahram and Nastic, Stefan and Ding, Xiaoning and Vij, Deepak and Xiong, Ying},
  year = {2021},
  month = sep,
  pages = {410--420},
  issn = {2159-6190},
  doi = {10.1109/CLOUD53861.2021.00055},
  abstract = {Service Level Objectives (SLOs) guide the elasticity of cloud applications, e.g., by deciding when and how much the resources provisioned to an application should be changed. Evaluating SLOs requires metrics, which can be directly measured on the application or system, or, more elaborately, be composed from multiple low-level metrics. The implementation of such metrics and SLOs, the triggering of elasticity strategies, and allowing configurability by the user deploying an application, requires a flexible middleware. In this paper, we present a middleware that provides an orchestrator-independent SLO controller for periodically evaluating SLOs and triggering elasticity strategies, while decoupling SLOs from the elasticity strategies to increase flexibility, and provider-independent services for obtaining low-level metrics and composing them into higher-level metrics. We evaluate our middleware by implementing a motivating use case, featuring a cost efficiency SLO for an application deployed on Kubernetes.},
  keywords = {Cloud,Cloud computing,Conferences,Costs,Elasticity,Measurement,Middleware,Orchestrator-independent,Service Level Objectives},
  file = {/Users/nkratky/Zotero/storage/UX9G7BH4/Pusztai et al. - 2021 - A Novel Middleware for Efficiently Implementing Co.pdf;/Users/nkratky/Zotero/storage/ZDNBL563/9582269.html}
}

@inproceedings{pusztaiSLOScriptNovel2021,
  title = {{{SLO Script}}: {{A Novel Language}} for {{Implementing Complex Cloud-Native Elasticity-Driven SLOs}}},
  shorttitle = {{{SLO Script}}},
  booktitle = {2021 {{IEEE International Conference}} on {{Web Services}} ({{ICWS}})},
  author = {Pusztai, Thomas and Morichetta, Andrea and Pujol, V{\'i}ctor Casamayor and Dustdar, Schahram and Nastic, Stefan and Ding, Xiaoning and Vij, Deepak and Xiong, Ying},
  year = {2021},
  month = sep,
  pages = {21--31},
  doi = {10.1109/ICWS53863.2021.00017},
  abstract = {Service Level Objectives (SLOs) allow defining expected performance of cloud services, such that cloud service providers know what they guarantee and service consumers know what to expect. Most approaches focus on low-level SLOs, closely related to resources, e.g., average CPU or memory usage, and are usually bound to specific elasticity controllers. We present SLO Script, a language and accompanying framework, motivated by real-world, industrial needs to allow service providers to define complex, high-level SLOs in an orchestrator-independent manner. The main features of SLO Script include: i) novel abstractions (StronglyTypedSLO) with type safety features, ensuring compatibility between SLOs and elasticity strategies, ii) abstractions that enable decoupling of SLOs from elasticity strategies, iii) a strongly typed metrics API, and iv) an orchestrator-independent object model that enables language extensibility. We present a case study about a real-world, cloud-native application and evaluate our language while implementing a realistic Cost Efficiency SLO.},
  keywords = {cloud computing,Computational modeling,Conferences,Costs,elasticity,Elasticity,Measurement,metrics,orchestrator independence,Safety,SLO,Web services},
  file = {/Users/nkratky/Zotero/storage/G879P773/Pusztai et al. - 2021 - SLO Script A Novel Language for Implementing Comp.pdf;/Users/nkratky/Zotero/storage/DERI8Y5S/9590275.html}
}

@misc{quAutoscalingWebApplications2017,
  title = {Auto-Scaling {{Web Applications}} in {{Clouds}}: {{A Taxonomy}} and {{Survey}}},
  shorttitle = {Auto-Scaling {{Web Applications}} in {{Clouds}}},
  author = {Qu, Chenhao and Calheiros, Rodrigo N. and Buyya, Rajkumar},
  year = {2017},
  month = sep,
  number = {arXiv:1609.09224},
  eprint = {1609.09224},
  primaryclass = {cs},
  publisher = {{arXiv}},
  doi = {10.48550/arXiv.1609.09224},
  urldate = {2023-06-04},
  abstract = {Web application providers have been migrating their applications to cloud data centers, attracted by the emerging cloud computing paradigm. One of the appealing features of the cloud is elasticity. It allows cloud users to acquire or release computing resources on-demand, which enables web application providers to automatically scale the resources provisioned to their applications without human intervention under a dynamic workload to minimize resource cost while satisfying Quality of Service (QoS) requirements. In this paper, we comprehensively analyze the challenges that remain in auto-scaling web applications in clouds and review the developments in this field. We present a taxonomy of auto-scalers according to the identified challenges and key properties. We analyze the surveyed works and map them to the taxonomy to identify the weaknesses in this field. Moreover, based on the analysis, we propose new future directions that can be explored in this area.},
  archiveprefix = {arxiv},
  keywords = {{Computer Science - Distributed, Parallel, and Cluster Computing}},
  file = {/Users/nkratky/Zotero/storage/U5EQINTT/Qu et al. - 2017 - Auto-scaling Web Applications in Clouds A Taxonom.pdf;/Users/nkratky/Zotero/storage/7938CMUX/1609.html}
}

@inproceedings{seyboldElasticityScalableDatabases2016,
  title = {Is Elasticity of Scalable Databases a {{Myth}}?},
  booktitle = {2016 {{IEEE International Conference}} on {{Big Data}} ({{Big Data}})},
  author = {Seybold, Daniel and Wagner, Nicolas and Erb, Benjamin and Domaschka, J{\"o}rg},
  year = {2016},
  month = dec,
  pages = {2827--2836},
  doi = {10.1109/BigData.2016.7840931},
  urldate = {2023-12-29},
  abstract = {The age of cloud computing has introduced all the mechanisms needed to elastically scale distributed, cloud-enabled applications. At roughly the same time, NoSQL databases have been proclaimed as the scalable alternative to relational databases. Since then, NoSQL databases are a core component of many large-scale distributed applications. This paper evaluates the scalability and elasticity features of the three widely used NoSQL database systems Couchbase, Cassandra and MongoDB under various workloads and settings using throughput and latency as metrics. The numbers show that the three database systems have dramatically different baselines with respect to both metrics and also behave unexpected when scaling out. For instance, while Couchbase's throughput increases by 17\% when scaled out from 1 to 4 nodes, MongoDB's throughput decreases by more than 50\%. These surprising results show that not all tested NoSQL databases do scale as expected and even worse, in some cases scaling harms performances.},
  keywords = {related work},
  file = {/Users/nkratky/Zotero/storage/283957VM/Seybold et al. - 2016 - Is elasticity of scalable databases a Myth.pdf;/Users/nkratky/Zotero/storage/CCBYIT2R/7840931.html}
}

@inproceedings{shirinbabPerformanceComparisonHorizontal2018,
  title = {Performance {{Comparison}} between {{Horizontal Scaling}} of {{Hypervisor}} and {{Container Based Virtualization}} Using {{Cassandra NoSQL Database}}},
  booktitle = {3rd {{International Conference}} on {{Virtualization Application}} and {{Technology}} ({{ICVAT}} 2018, {{Nov}}.16-18, {{Sanya}}, {{China}}},
  author = {Shirinbab, Sogand and Lundberg, Lars and Casalicchio, Emiliano},
  year = {2018},
  urldate = {2023-12-29},
  abstract = {DiVA portal is a finding tool for research publications and student theses written at the following 50 universities and research institutions.},
  langid = {english},
  keywords = {related work},
  file = {/Users/nkratky/Zotero/storage/9YQACHBJ/Shirinbab et al. - 2018 - Performance Comparison between Horizontal Scaling .pdf}
}

@article{singhResearchAutoScalingWeb2019,
  title = {Research on {{Auto-Scaling}} of {{Web Applications}} in {{Cloud}}: {{Survey}}, {{Trends}} and {{Future Directions}}},
  shorttitle = {Research on {{Auto-Scaling}} of {{Web Applications}} in {{Cloud}}},
  author = {Singh, Parminder and Gupta, Pooja and Jyoti, Kiran and Nayyar, Anand},
  year = {2019},
  month = may,
  journal = {Scalable Computing: Practice and Experience},
  volume = {20},
  number = {2},
  pages = {399--432},
  issn = {1895-1767},
  doi = {10.12694/scpe.v20i2.1537},
  urldate = {2023-12-30},
  abstract = {Cloud computing emerging environment attracts many applications providers to deploy web applications on cloud data centers. The primary area of attraction is elasticity, which allows to auto-scale the resources on-demand. However, web applications usually have dynamic workload and hard to predict. Cloud service providers and researchers are working to reduce the cost while maintaining the Quality of Service (QoS). One of the key challenges for web application in cloud computing is auto-scaling. The auto-scaling in cloud computing is still in infancy and required detail investigation of taxonomy, approach and types of resources mapped to the current research. In this article, we presented the literature survey for auto-scaling techniques of web applications in cloud computing. This survey supports the research community to find the requirements in auto-scaling techniques. We present a taxonomy of reviewed articles with parameters such as auto-scaling techniques, approach, resources, monitoring tool, experiment, workload, and metric, etc. Based on the analysis, we proposed the new areas of research in this direction.},
  copyright = {Copyright (c)},
  langid = {english}
}

@book{srinadhuniPerformanceEvaluationCassandra2018,
  title = {Performance {{Evaluation}} of {{Cassandra Scalability}} on {{Amazon EC2}}},
  author = {Srinadhuni, Siddhartha},
  year = {2018},
  urldate = {2023-12-29},
  abstract = {DiVA portal is a finding tool for research publications and student theses written at the following 50 universities and research institutions.},
  langid = {english},
  keywords = {related work},
  file = {/Users/nkratky/Zotero/storage/L26YUWXN/Srinadhuni - 2018 - Performance Evaluation of Cassandra Scalability on.pdf}
}

@misc{TuningJavaResources,
  title = {Tuning {{Java}} Resources | {{Apache Cassandra}} 3.0},
  urldate = {2023-06-06},
  abstract = {Tuning the Java Virtual Machine (JVM) can improve performance or reduce high memory consumption.},
  howpublished = {https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/operations/opsTuneJVM.html},
  langid = {american},
  file = {/Users/nkratky/Zotero/storage/RBEU87QM/opsTuneJVM.html}
}

@misc{UnderstandingApacheCassandra,
  title = {Understanding {{Apache Cassandra}}{\texttrademark} {{Performance Through Read}}/{{Write Metrics}} | {{DataStax Accelerate}} 2019 - {{YouTube}}},
  urldate = {2023-11-26},
  howpublished = {https://www.youtube.com/watch?v=Ax6mtX3Mrjg}
}

@inproceedings{wangAvailabilityAwareVirtualMachine2012,
  title = {An {{Availability-Aware Virtual Machine Placement Approach}} for {{Dynamic Scaling}} of {{Cloud Applications}}},
  booktitle = {2012 9th {{International Conference}} on {{Ubiquitous Intelligence}} and {{Computing}} and 9th {{International Conference}} on {{Autonomic}} and {{Trusted Computing}}},
  author = {Wang, Wenting and Chen, Haopeng and Chen, Xi},
  year = {2012},
  month = sep,
  pages = {509--516},
  doi = {10.1109/UIC-ATC.2012.31},
  urldate = {2023-12-05},
  abstract = {Cloud computing promises customers the on-demand ability to dynamically provision virtualization resources in face of workload variations. Most existing scaling approaches addressed this problem by allocating application to a certain amount of cloud resources. However, the problem of the availability of application influenced by VM-based physical locations during resource scaling process is a serious challenge due to dynamic complex workload and has not been widely discussed yet. In this paper, we present a novel availability-based computing model to describe availability attribute of one application in the hierarchical structured cloud. Moreover, we propose an availability-aware policy by performing both vertical and horizontal scaling to explore how and where to allocate computing resource. Simulation results indicate that our model captured the availability of cloud applications properly and proposed scaling approach achieves the objectives of meeting availability demands and minimizing the total communication cost.},
  file = {/Users/nkratky/Zotero/storage/GPVPP2F2/Wang et al. - 2012 - An Availability-Aware Virtual Machine Placement Ap.pdf;/Users/nkratky/Zotero/storage/BMIQJNPG/6332041.html}
}
